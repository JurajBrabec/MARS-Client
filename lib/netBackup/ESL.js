const cli = require('pixl-cli');
const fs = require('fs');
const path = require('path');
const Database = require('../Database');
const { Emitter } = require('../Emitter');

class ESL extends Emitter {
  constructor(netBackup) {
    super();
    this.netBackup = netBackup;
    this.fileName = 'esl_omni_obcheck.txt';
    this.fileNameClients = 'esl_omni_obcheck_client.txt';
    this.path = process.env.NBU2ESL_PATH;
    this.title = 'Writing ESL information';
    this.line1 = '#Automatic upload for backup information to ESL';
    this.line2 = '#Generated by MARS 4.1 @';
    this.eslFields = {
      'System Name': '',
      'Backup Method': 'NetBackup',
      'Backup Name': '',
      'Backup Scheduler': 'NetBackup',
      'Tape Check Time': '15:00',
      'Backup Start Time': '',
      'Backup Type': '',
      'Service Tier': '98%',
      'Scheduling Mon': '',
      'Scheduling Tue': '',
      'Scheduling Wed': '',
      'Scheduling Thu': '',
      'Scheduling Fri': '',
      'Scheduling Sat': '',
      'Scheduling Sun': '',
      'Scheduling On Demand': '1',
      'Restartable?': 'Auto Recovery',
      'Restart Window': '12 h',
      'Backup Device': '',
      'Backup Retention': '',
      'Recovery Instructions': '',
      Comments: '',
      //			,'Ticket Postpone Time'	: ''
      //			,'Backup Reportable'		: '1'
    };
    this.eslFieldsClients = {
      'System Name': '',
      'Backup Method': 'NetBackup',
      'Backup Name': '',
      'Client System Name': '',
    };
  }
  async _run() {
    const startTime = this.netBackup.startTime;
    let result;
    try {
      let sql, fileName, fields;
      if (!fs.existsSync(this.path)) fs.mkdirSync(this.path);
      sql = `select * from nbu_esl where masterserver='${this.netBackup.masterServer}';`;
      result = await Database.query(sql);
      this.progress(1, 4);
      if (result.rows) {
        fields = this.eslFields;
        fileName = path.join(this.path, this.fileName);
        if (fs.existsSync(fileName)) fs.unlinkSync(fileName);
        cli.appendFile(
          fileName,
          this.line1 + '\n' + this.line2 + startTime.format('D.M.Y H:mm') + '\n'
        );
        cli.appendFile(fileName, Object.keys(fields).join(',') + '\n');
        result.rows.forEach((row) => {
          fields['System Name'] = row.masterserver;
          fields['Backup Name'] = row.name;
          fields['Backup Start Time'] = row.mon_start || row.sun_start;
          fields['Backup Type'] = row.backuptype == 'Full' ? 'Full' : 'Incr';
          fields['Scheduling Mon'] = row.mon_start ? 1 : 0;
          fields['Scheduling Tue'] = row.tue_start ? 1 : 0;
          fields['Scheduling Wed'] = row.wed_start ? 1 : 0;
          fields['Scheduling Thu'] = row.thu_start ? 1 : 0;
          fields['Scheduling Fri'] = row.fri_start ? 1 : 0;
          fields['Scheduling Sat'] = row.sat_start ? 1 : 0;
          fields['Scheduling Sun'] = row.sun_start ? 1 : 0;
          fields['Backup Device'] = row.res;
          fields['Backup Retention'] = row.retentionlevel.replace(
            /(ay|eek|onth|ear)s?/,
            ''
          );
          cli.appendFile(
            fileName,
            Object.values(fields)
              .map((value) => `"${value}"`)
              .join(',') + '\n'
          );
        });
        this.progress(2, 4);
        sql = `select * from nbu_esl_client where masterserver='${this.netBackup.masterServer}';`;
        result = await Database.query(sql);
        this.progress(3, 4);
        if (result.rows) {
          fields = this.eslFieldsClients;
          fileName = path.join(this.path, this.fileNameClients);
          if (fs.existsSync(fileName)) fs.unlinkSync(fileName);
          cli.appendFile(
            fileName,
            this.line1 +
              '\n' +
              this.line2 +
              startTime.format('D.M.Y H:mm') +
              '\n'
          );
          cli.appendFile(fileName, Object.keys(fields).join(',') + '\n');
          result.rows.forEach((row) => {
            fields['System Name'] = row.masterserver;
            fields['Backup Name'] = row.name;
            fields['Client System Name'] = row.client;
            cli.appendFile(
              fileName,
              Object.values(fields)
                .map((value) => `"${value}"`)
                .join(',') + '\n'
            );
          });
        }
        cli.println(`${fileName} created`);
      }
      this.end();
    } catch (err) {
      this.error(err);
    }
  }
  asBatch() {
    return this;
  }
}

module.exports = ESL;
